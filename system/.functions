#!/bin/sh
#
# Usage: extract <file>
# Description: extracts archived files / mounts disk images
# Note: .dmg/hdiutil is macOS-specific.
#
# credit: http://nparikh.org/notes/zshrc.txt
extract () {
    if [ -z "$1" ]
      then
        echo "Usage: extract <file>"
    elif [ -f $1 ]; then
        case $1 in
            *.tar.bz2)  tar -jxvf $1                        ;;
            *.tar.gz)   tar -zxvf $1                        ;;
            *.bz2)      bunzip2 $1                          ;;
            *.dmg)      hdiutil mount $1                    ;;
            *.gz)       gunzip $1                           ;;
            *.tar)      tar -xvf $1                         ;;
            *.tbz2)     tar -jxvf $1                        ;;
            *.tgz)      tar -zxvf $1                        ;;
            *.zip)      unzip $1                            ;;
            *.ZIP)      unzip $1                            ;;
            *.7z)       7z x $1                             ;;
            *.pax)      cat $1 | pax -r                     ;;
            *.pax.Z)    uncompress $1 --stdout | pax -r     ;;
            *.rar)      unrar x $1                          ;;
            *.Z)        uncompress $1                       ;;
            *)          echo "'$1' cannot be extracted/mounted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

pip-install-save() {
  for pkg in $@; do
        pip install "$pkg"
    done
    pip freeze > requirements.txt;
}


# resize and optimize image
# using test results from https://www.smashingmagazine.com/2015/06/efficient-image-resizing-with-imagemagick/
smartresize() {

  if [ ! "$#" -eq 3 ]; then
    echo "Usage: smartresize image width output_dir"
    return 1
  fi

  mogrify -path $3 -filter Triangle -define filter:support=2.0 -thumbnail $2 -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB $1
}

mysqlsource() {
  if [ -z "$1" ]; then
    echo "Usage: mysqlsource <path_to_file>"
  elif [ -f $1 ]; then
    mysql -u root -p < $1
  else
    echo "'$1' is not a valid file"
  fi
}

gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -vf scale=720:-1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize out-static*.png  GIF:- | gifsicle --colors 128 --delay=10 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -vf scale=720:-1 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "Usage: gifify <input_movie.mov> <--good>. You DO need to include extension."
  fi
}

wifi-password() {
  # locate airport
  airport="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport"
  if [ ! -f $airport ]; then
    echo "ERROR: Can't find \`airport\` CLI program at \"$airport\"."
    exit 1
  fi
  # check for user-provided ssid 
  if [ -z "$1" ]; then
    # get current ssid
    ssid="`$airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'`"
    if [ "$ssid" = "" ]; then
      echo "ERROR: Could not retrieve current SSID. Are you connected?" >&2
      exit 1
    fi
  else
    ssid="$@"
  fi
  # get password
  password="`security find-generic-password -D 'AirPort network password' -ga \"$ssid\" 2>&1 >/dev/null`"
  echo $password
}

# Read and unset env variables from .env file
read_env() {
    export $(cat .env | grep -v "^#" | xargs)
}

unset_env() {
    unset $(cat .env | grep -v "^#" | sed -E 's/(.*)=.*/\1/' | xargs)
}
